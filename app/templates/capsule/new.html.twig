{% extends "base.html.twig" %}
{% block title %}| New Capsule{% endblock %}
{% block content %}
    {% if post.reply %}
        <h1>Replying To {{ post.reply.title }}</h1>
        {% include 'capsule.html.twig' with {'post': post.reply} %}
    {% elseif post.title %}
        <h1>Editing Draft "{{ post.title }}"</h1>
    {% else %}
        <h1>New Capsule</h1>
    {% endif %}
    {{ form_start(form) }}
        <div class="my-custom-class-for-errors">
            {{ form_errors(form) }}
        </div>
        <div class="mb-3">
            <label class="form-label">{{ form_label(form.title) }}</label>
            {{ form_widget(form.title, {'attr': {'class': 'form-control'}}) }}
        </div>

        <label for="tag-input" class="form-label">Tags</label>
        <div class="tags mb-3"
             data-index="{{ form.tags|length > 0 ? form.tags|last.vars.name + 1 : 0 }}"
             data-prototype="{{ form_widget(form.tags.vars.prototype)|e('html_attr') }}"
             id="tags"
        >
            {% for tag in form.tags %}
                <div class="tag">{{ tag.vars.value }}</div>
            {% endfor %}
            <input name="tag-input" type="text" class="tag-input" placeholder="Type Tags Here" id="tag-input">
        </div>

        <div class="mb-3">
            <label class="form-label">{{ form_label(form.content) }}</label>
            {{ form_widget(form.content, {'attr': {'class': 'form-control', 'rows': '10'}}) }}
        </div>

        {{ form_row(form._token) }}
        <div class="d-flex justify-content-between mb-5">
            <div class="">
                {{ form_widget(form.submit, {'attr': {'class': 'btn btn-primary'}}) }}
                {{ form_widget(form.saveToDrafts, {'attr': {'class': 'btn btn-secondary'}}) }}
            </div>
            <a class="btn btn-outline-secondary" href="{{ url('app_view_capsule', {uuid: 91}) }}">Learn more</a>
        </div>
    {{ form_end(form, {render_rest: false}) }}
{% endblock %}

{% block javascripts %}
    <script defer>
        const tags = document.getElementById("tags");
        const tagInput = document.getElementById("tag-input");

        const addDeleteToTag = (tag) => {
            tag.addEventListener("click", (e) => {
                tag.remove()
            })
        }

        const addFormToCollection = (value) => {
            const item = document.createElement('div');
            item.classList.add('tag');
            item.innerHTML = tags
                .dataset
                .prototype
                .replace(
                    /__name__/g,
                    tags.dataset.index
                );
            item.firstChild.style = "display: none;";
            item.firstChild.value = value;
            const text = document.createElement("span");
            text.innerText = value;
            item.appendChild(text);

            addDeleteToTag(item);

            tags.insertBefore(item, tagInput);

            tags.dataset.index++;
        };


        document
            .getElementById("tag-input")
            .addEventListener("keydown", (e) => {
                if (e.key === "Enter") {
                    e.preventDefault()
                    if (e.target.value === "") return;
                    addFormToCollection(e.target.value)
                    e.target.value = "";
                }
            });

        document
            .querySelectorAll('.tag')
            .forEach(tag => {
                addDeleteToTag(tag);
            });
    </script>
{% endblock %}
